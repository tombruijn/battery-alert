#!/bin/bash

version() {
  echo $(< VERSION)
}

log() {
  echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1" >> "$LOG_FILE"
  [ $2 ] && echo $1
}

schedule() {
  [[ -z $schedule ]] && schedule=$(< $SCHEDULE_FILE)
  echo "$schedule"
}

seconds_since_epoch() {
  echo $(date +%s)
}

is_min_charge() {
  [[ $1 -le $MIN_STATUS ]]
}

is_max_charge() {
  [[ $1 -ge $MAX_STATUS ]]
}

notification_icon() {
  case $(battery_percentage) in
    [0-9]|[1-3][0-9])
      icon=empty
      ;;
    [4-8][0-9])
      icon=half
      ;;
    *)
      icon=full
      ;;
  esac
  echo "$icon"
}

notify() {
  NEXT_ALERT_TIME=${NEXT_ALERT_TIME:-0}
  now=$(seconds_since_epoch)
  if [[ $NEXT_ALERT_TIME -le $now ]]; then
    $NOTIFICATION_STICKY && sticky="-s"
    icon="--image ./icons/battery-alert-icon-$(notification_icon).png"
    growlnotify -n "$APP_NAME" $icon $sticky -m "$1" $APP_NAME
    if [[ $? -eq  0 ]]; then
      NEXT_ALERT_TIME=$(($now + $NOTIFICATION_DELAY_TIME))
      log "Notify: $1"
    else
      log "Notify failed: $1"
    fi
  else
    log "Notify (not sent): $1"
  fi
}

battery_percentage() {
  echo `pmset -g ps | sed -n 's/.*[[:blank:]]+*\(.*\)%.*/\1/p'`
}

is_charging() {
  return $([[ -z `pmset -g ps | sed -n -e 's/.*\(discharging\).*/\1/p'` ]])
}

charge_state() {
  if is_charging; then echo charging; else echo discharging; fi
}

